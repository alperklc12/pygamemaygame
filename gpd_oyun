import json
import math
import pygame
import random
from constant_md import *
from sector_md import Sector

with open('game_start.json', 'r') as fl:
    data = json.load(fl)

pygame.init()

# dimension
WIDTH = 1200
HEIGHT = 600
DIGIT_LST = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

# surface
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('GDP SIMULATOR')

# time and fps
FPS = 10
clock = pygame.time.Clock()

# constant variable
YEAR = 360
MONTH = 30

# variable
# game variable
is_paused = False
is_selected = False
is_menu_opened = False
user_text = ''
user_text_color = LIGHT_GREY

# variable
name = data['name']
population = data['population']
birth = data['birth']["amount"]
birth_delta = data['birth']["delta"]

# consuming variable
income = data['income']["amount"]

# date variable
year = data['year']
month = 1
day = 1

# font
base_font = pygame.font.SysFont('calibri', 15)
lrg_font = pygame.font.SysFont('calibri', 18)

# text and images  __init__(self, name, surface, stock=0, capital=0, worker=0, product_per_worker=0):
food = Sector('food', screen, stock=data['food_stock'], capital=data['food_capital'], worker=data['farmer'],
              product_per=data['food_per']['amount'])
semi_product = Sector('semi product', screen, stock=data['semi_product_stock'], capital=data['semi_product_capital'],
                      worker=data['industrial_worker'], product_per=data['semi_product_per']['amount'])
goods = Sector('goods', screen, stock=data['goods_stock'], capital=data['goods_capital'],
               worker=data['manufacturing_worker'],
               product_per=data['goods_per']['amount'])
electric = Sector('electric', screen, stock=data['electric_stock'], capital=data['electric_capital'],
                  worker=data['electric_worker'],
                  product_per=data['electric_per']['amount'])
coal_petrol = Sector('coal & petrol', screen, stock=data['coal_petrol_stock'], capital=data['coal_petrol_capital'],
                     worker=data['fuel_worker'], product_per=data['coal_petrol_per']['amount'])

total_export = 0
total_import = 0

population_txt = base_font.render(f'Population: {population}', True, BLACK)
population_rct = population_txt.get_rect()
population_rct.topleft = ((COLUMN_MARGE * 3 + 10) * 1, ROW_MARGE * 6)

birth_txt = base_font.render(f'Birth: {birth}', True, BLACK)
birth_rct = birth_txt.get_rect()
birth_rct.topleft = ((COLUMN_MARGE * 3 + 10) * 1, ROW_MARGE * 7)

birth_delta_txt = base_font.render(f'Birth Rate: {birth_delta}', True, BLACK)
birth_delta_rct = birth_delta_txt.get_rect()
birth_delta_rct.topleft = ((COLUMN_MARGE * 3 + 10) * 1, ROW_MARGE * 8)

# date
day_txt = lrg_font.render(f'Day: {day}', True, BLACK)
day_rct = day_txt.get_rect()
day_rct.topleft = ((COLUMN_MARGE * 3 + 10) * 1, ROW_MARGE * 2)

month_txt = lrg_font.render(f'Month: {month}', True, BLACK)
month_rct = month_txt.get_rect()
month_rct.topleft = ((COLUMN_MARGE * 3 + 10) * 1, ROW_MARGE * 3)

year_txt = lrg_font.render(f'Year: {year}', True, BLACK)
year_rct = year_txt.get_rect()
year_rct.topleft = ((COLUMN_MARGE * 3 + 10) * 1, ROW_MARGE * 4)
rect_lst = []

export_txt = base_font.render(f'Export: {total_export}', True, BLACK)
export_rct = export_txt.get_rect()
export_rct.topleft = ((COLUMN_MARGE * 1 + 20) * 1, ROW_MARGE * 21)

import_txt = base_font.render(f'Import: {total_import}', True, BLACK)
import_rct = import_txt.get_rect()
import_rct.topleft = ((COLUMN_MARGE * 1 + 20) * 1, ROW_MARGE * 22)

income_txt = base_font.render(f'Montly Income: {income}', True, BLACK)
income_rct = income_txt.get_rect()
income_rct.topleft = ((COLUMN_MARGE * 2 + 20) * 1, ROW_MARGE * 2)

food.setting(base_font, 0, 1)
semi_product.setting(base_font, 0, 10)
goods.setting(base_font, 0, 20)
electric.setting(base_font, 1, 1)
coal_petrol.setting(base_font, 1, 10)

# loop
running = True
while running:
    # event
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_a:
                is_paused = True
            if event.key == pygame.K_s:
                is_paused = False
            if event.key == pygame.K_SPACE:
                is_menu_opened = True

        if is_paused:
            if event.type == pygame.MOUSEBUTTONDOWN:
                print(event)
                for item in rect_lst:
                    if item.collidepoint(event.pos):
                        selected_rect = item
                        active = True

    # draw
    screen.fill(WHITE)
    for i in range(1, 4):
        pygame.draw.line(screen, BLACK, (COLUMN_MARGE * i, 0), (COLUMN_MARGE * i, HEIGHT))

    food.draw()
    semi_product.draw()
    goods.draw()
    electric.draw()
    coal_petrol.draw()

    screen.blit(population_txt, population_rct)
    screen.blit(birth_txt, birth_rct)
    screen.blit(birth_delta_txt, birth_delta_rct)

    screen.blit(day_txt, day_rct)
    screen.blit(month_txt, month_rct)
    screen.blit(year_txt, year_rct)

    screen.blit(export_txt, export_rct)
    screen.blit(import_txt, import_rct)

    screen.blit(income_txt, income_rct)

    # update
    if not is_paused:
        if day < YEAR:
            day += 1
        else:
            day = 1
            month = 1
            year += 1
            birth += math.ceil(birth * birth_delta)

        if divmod(day, MONTH)[1] == 0:
            month += 1
            food.stock += food.produce
            food.produce = 0
            semi_product.stock += semi_product.produce
            semi_product.produce = 0
            goods.stock += goods.produce
            goods.produce = 0
            electric.stock += electric.produce
            electric.produce = 0
            coal_petrol.stock += coal_petrol.produce
            coal_petrol.produce = 0

        birth_txt = base_font.render(f'Birth: {birth}', True, BLACK)
        population += birth

        food.produce += math.ceil((food.worker * food.product_per) / 360)
        food.stock -= math.ceil((population * (income * .2)) / 360)

        semi_product.produce += math.ceil((semi_product.worker * semi_product.product_per) / 360)
        semi_product.stock -= math.ceil(((goods.worker * goods.product_per) / 360) * .4)

        goods.produce += math.ceil((goods.worker * goods.product_per) / 360)
        goods.stock -= math.ceil((population * (income * .2)) / 360)

        electric.produce += math.ceil((electric.worker * electric.product_per) / 360)
        electric.stock -= math.ceil((population * (income * .2)) / 360)

        coal_petrol.produce += math.ceil((coal_petrol.worker * coal_petrol.product_per) / 360)
        coal_petrol.stock -= math.ceil((population * (income * .2)) / 360)

    day_txt = lrg_font.render(f'Day: {day}', True, BLACK)
    month_txt = lrg_font.render(f'Month: {month}', True, BLACK)
    year_txt = lrg_font.render(f'Year: {year}', True, BLACK)

    population_txt = base_font.render(f'Population: {population}', True, BLACK)

    food.update(base_font)
    goods.update(base_font)
    semi_product.update(base_font)
    electric.update(base_font)
    coal_petrol.update(base_font)

    pygame.display.update()
    clock.tick(FPS)

# end
pygame.quit()
